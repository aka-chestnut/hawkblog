---
title: "338比特位计数"
date: 2022-01-03T17:00:47+08:00
hidehome: true
draft: false
tags: ["LeetCode"]
categories: "LeetCode"
---
LeetCode 338比特位计数 刷题记录
<!--more-->
[比特位计数](https://leetcode-cn.com/problems/counting-bits/)

大致分析：

a . 如果结尾是 1，那么一定是奇数，那么一定比 -1 的偶数多一个 1:

3->11     2->10

5->101   4->100

b. 如果是偶数，结尾是 0，那么会和 x/2 的数字含的 1 数量一样 

2->10    1->1

4->100   3->11

6->110   5->101

## 思路 A

根据如上思路：

```python
class Solution:
    def countBits(self, n: int) -> List[int]:
        res = []
        for i in range(n+1):
            if i == 0:
                res.append(i)
            else:
                if int(i) % 2 == 0:
                    tmp = res[int(i/2)]
                    res.append(tmp)
                else:
                    tmp = res[-1] + 1
                    res.append(tmp)
        return res
```

## 思路 B

#### Brian Kernighan 算法

任意 int 型数字可以用 32 位二进制的数表示，根据 Brian Kernighan 算法，`x&(x-1)` 可以令表示为二进制后最低位的 1 变为 0，那么循环该计算直到数字变成 0，循环的次数即为含有 1 的个数。

```python
class Solution:
    def countBits(self, n: int) -> List[int]:
        res = []
        for i in range(0,n+1):
            res.append(self.bb(i))
        return res  
  
    def bb(self,n):
        icnt = 0
        while n>0:
            n &= (n-1)
            icnt += 1
        return icnt
```

## 思路 3

思路 2 的进阶，由于思路 2 的时间复杂度为 `nlogn`，而根据思路 2，很容易联想到不需要针对每一个数字都重新调用算法计算一遍，那么自然可以运用动态规划的方法：

对于数字 x 而言，`x&(x-1)` 表示为二进制中 1 的数量比 x 表示为二进制后 1 的数量少 1，假设最终求出的数组为 L，则有 `L[x]=L[x&(x-1)]+1`

因此根据如上思路：

```python
class Solution:
    def countBits(self, n: int) -> List[int]:
        res = [0]
        for i in range(1,n+1):
            res.append(res[i&(i-1)]+1) 
        return res
```
