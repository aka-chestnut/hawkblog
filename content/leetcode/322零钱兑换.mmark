---
title: "322零钱兑换"
date: 2022-01-22T18:07:31+08:00
hidehome: true
draft: false
tags: ["LeetCode"]
categories: "LeetCode"
---
LeetCode-322零钱兑换 刷题记录
<!--more-->
## 思路 A

模仿斐波那切 memo 的方法，但尝试下来时间复杂度和空间复杂度都很不理想，所以一定是哪里出了问题

思考了一下可以优化的地方：

1. 剪枝：对 coin 进行排序，循环时如果判断条件满足，那么就直接跳过

```python
class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        memo = {i:-2 for i in range(0,amount+1)}
        memo[0] = 0
        def helper(amount,memo):
            if memo[amount]>=-1:return memo[amount]
            else:
                res = []
                for coin in coins:
                    if amount-coin<0:
                        continue
                    if memo[amount-coin] > -1:
                        res.append(memo[amount-coin]+1)
                    elif memo[amount-coin] == -1:
                        continue
                    elif memo[amount-coin] <-1:
                        temp = helper(amount-coin,memo)
                        if temp == -1:
                            continue 
                        else:
                            res.append(temp+1)
                res = list(filter(lambda x:x>=0,res))
                memo[amount] = -1 if len(res)==0 else min(res)
                return memo[amount]
        helper(amount,memo)
        return memo[amount]
```

## 思路 B

暴力递归，基本在时间内跑不出来答案

```python
class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
  
        def dq(amount):
            if amount==0:return 0
            if amount<0:return -1
            res = float('INF') 
            for coin in coins:
                subproblem = dq(amount-coin)
                if subproblem >-1:
                    res = min(res,subproblem+1)
            return res if res != float('INF') else -1 
  
        return dq(amount)
```

## 思路 C

把暴力递归加上 memo，简化了思路 A 中各个条件的分支判断，但时间复杂度要比思路 A 要高

```python
class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        memo = {}
  
        def dq(amount):
            if amount==0:return 0
            if amount<0:return -1
            if amount in memo:return memo[amount]
            res = float('INF') 
            for coin in coins:
                subproblem = dq(amount-coin)
                if subproblem >-1:
                    res = min(res,subproblem+1)
            memo[amount] = res if res != float('INF') else -1 
            return memo[amount]
  
        return dq(amount)
```

## 思路 D

自底向上迭代，时间复杂度和空间复杂度都有很大的提升，但还是不太行，击败不超过 20%

```python
class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        resdict = {i:amount+1 for i in range(0,amount+1)}
        resdict[0] = 0
        for amt in range(1,amount+1):
            for coin in coins:
                if amt >= coin:
                    resdict[amt] = min(resdict[amt],resdict[amt-coin]+1)
        return resdict[amount] if resdict[amount]!=amount+1 else -1
```
