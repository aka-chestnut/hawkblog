---
title: "752打开转盘锁"
date: 2022-01-22T18:13:23+08:00
hidehome: true
draft: false
tags: ["LeetCode"]
categories: "LeetCode"
---
LeetCode-752打开转盘锁 刷题记录
<!--more-->
## 思路 A

BFS 算法，写的有点烂

一点需要注意：deadends 是个 List，如果运用 BFS 判断时，很有可能出现时间复杂度不符合要求。为了加快检索速度，改成字典形式（哈希表），判断速度加快

```python
class Solution:
    def openLock(self, deadends: List[str], target: str) -> int:
        newdeadends = {c:1 for c in deadends}
        if '0000' in deadends:
            return -1
        def get_adj(x):

            res = []
            x = [int(c) for c in x]
            for idx,item in enumerate(x):
                if item == 9:
                    tmp1 = 0
                else:
                    tmp1 = item + 1
                if item == 0:
                    tmp2 = 9 
                else:
                    tmp2 = item - 1
                x[idx] = tmp1 
                tmp1 = ''.join([str(c) for c in x])
                if newdeadends.get(tmp1,0)==0:
                    res.append(tmp1)
                    newdeadends[tmp1] = 1
                x[idx] = tmp2
                tmp2 = ''.join([str(c) for c in x])
                if newdeadends.get(tmp2,0)==0:
                    res.append(tmp2)
                    newdeadends[tmp2] = 1
                x[idx] = item
            return res

        step = 0
        nowstep = ['0000']
        deadends.append('0000')
        while len(nowstep)>0:
            if target in nowstep:
                return step 
            step += 1
            tmp = [] 
            for s in nowstep:
                tmp.extend(get_adj(s))
            nowstep = tmp
        return -1
```

可以改进的地方：

* 扩散时，用了一个函数 `get_adj` 获得全部相邻的节点，再进行判断是否达到终点，其实会造成多次无效计算（因为可能已经到达终点了，仍需计算其他节点），所以改写一下 get_adj 函数

## 思路 B

* [X] 双 DFS

双 BFS 思路：从 start 和 target 同时开始搜索：

有两个当前节点:

有几个需要注意的地方：

1. dead 的加入时间，不能再扩散后立刻加入，而应该在判断不包含关系后加入：

    这样一个节点可以经历：加入-（交换后 q2 再走一步并判断）-dead的过程

    如果再扩散后就加入，那么 q2 就走不到该节点，导致永远不可能相遇
2. 注意 37 行，dead 判断条件，第一次写成了 continue，导致如果 up 在 dead 就走不到 down，注意！⚠️

```python
class Solution:
    def openLock(self, deadends: List[str], target: str) -> int:
        if ('0000' in deadends) | (target in deadends):
            return -1
        def get_up(x,site):
            x = [int(c) for c in x]
            if x[site] == 9:
                x[site] = 0
            else:
                x[site] += 1
            return ''.join([str(c) for c in x])
  
        def get_down(x,site):
            x = [int(c) for c in x]
            if x[site] == 0:
                x[site] = 9
            else:
                x[site] -= 1
            return ''.join([str(c) for c in x])
  
        dead = set(deadends)
        q1 =  {'0000',}
        q2 = {target,}
        step = 0
        while (len(q1)>0) & (len(q2)>0):
            if len(q2) < len(q1):
                q1,q2 = q2,q1 
            temp = set()
            for item in q1:
                if item in q2:
                    return step
                dead.add(item)
  
                for i in range(4):
                    up = get_up(item,i)
                    if up not in dead: 
                        temp.add(up)
                    down = get_down(item,i)
                    if down not in dead:
                        temp.add(down)
            q1 = temp
            step += 1
        return -1
```

 ``
