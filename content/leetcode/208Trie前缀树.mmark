---
title: "208Trie前缀树"
date: 2022-01-22T17:54:38+08:00
hidehome: true
draft: false
tags: ["LeetCode"]
categories: "LeetCode"
---
LeetCode-208Trie前缀树 刷题记录
<!--more-->
## 思路 A

用 List 表示子节点，每次查找时速度会很慢

```python
class TrieNode:
    def __init__(self,word=None,children=[],stop=False):
        self.word = word
        self.stop = False
        self.children = []

class Trie:

    def __init__(self):
        self.root = TrieNode()

    def insert(self, word: str) -> None:
        tmp = self.root
        for s in word:
            if s not in [f.word for f in tmp.children]:
                tmpnode = TrieNode(s)
                tmp.children.append(tmpnode)
                tmp = tmpnode
            else:
                tmp = [f for f in tmp.children if f.word==s]
                tmp = tmp[0]
        tmp.stop = True


    def search(self, word: str) -> bool:
        tmp = self.root
        for s in word:
            if s not in [f.word for f in tmp.children]:
                return False
            else:
                tmp = [f for f in tmp.children if f.word==s]
                tmp = tmp[0]
        if tmp.stop==True:
            return True
        else:
            return False


    def startsWith(self, prefix: str) -> bool:
        tmp = self.root
        for s in prefix:
            if s not in [f.word for f in tmp.children]:
                return False
            else:
                tmp = [f for f in tmp.children if f.word==s]
                tmp = tmp[0]
        return True
```

## 思路 B

用 Map 改写一下子节点，尝试了一下速度得到了提升

```python
class TrieNode:
    def __init__(self,word=None,children={},stop=False):
        self.word = word
        self.stop = False
        self.children = children 

class Trie:

    def __init__(self):
        self.root = TrieNode(None,{},False)

    def insert(self, word: str) -> None:
        tmp = self.root
        for s in word:
            if s not in tmp.children.keys():
                tmpnode = TrieNode(s,{},False)
                tmp.children[s] = tmpnode
                tmp = tmpnode
            else:
                tmp = tmp.children[s]
        tmp.stop = True


    def search(self, word: str) -> bool:
        tmp = self.root
        for s in word:
            if s not in tmp.children.keys():
                return False
            else:
                tmp = tmp.children[s]
        if tmp.stop==True:
            return True
        else:
            return False


    def startsWith(self, prefix: str) -> bool:
        tmp = self.root
        for s in prefix:
            if s not in tmp.children.keys():
                return False
            else:
                tmp = tmp.children[s]
        return True
      
```

这里遇到了一个问题，如果每次实例类时不给定赋值，那么多个案例之间可能出现共享内存？很奇怪，暂时还没明白哪里有问题
